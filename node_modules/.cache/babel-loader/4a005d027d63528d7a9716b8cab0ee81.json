{"ast":null,"code":"var _jsxFileName = \"/Users/carlostrujillosamper/Ironhack/webmad2019/week7/thursday/daily/lab-react-ironbeers/carlosbeers/src/components/NewBeer.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass NewBeer extends Component {\n  constructor(props) {\n    super(props); //             will help us to toggle add task form   \n    //                      |\n\n    this.handleFormSubmit = event => {\n      event.preventDefault();\n      const title = this.state.title;\n      const description = this.state.description;\n      const projectID = this.props.theProject._id; // <== we need to know to which project the created task belong, so we need to get its 'id'\n      // it has to be the 'id' because we are referencing project \n      // by its id in the task model on the server side ( project: {type: Schema.Types.ObjectId, ref: 'Project'})\n      // { title, description, projectID } => this is 'req.body' that will be received on the server side in this route, \n      // so the names have to match\n\n      axios.post(\"http://localhost:5000/api/tasks\", {\n        title,\n        description,\n        projectID\n      }).then(() => {\n        // after submitting the form, retrieve project one more time so the new task is displayed as well \n        //              |\n        this.props.getTheProject();\n        this.setState({\n          title: \"\",\n          description: \"\"\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.handleChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.showNewBeerForm = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Add Beer\"), React.createElement(\"form\", {\n        onSubmit: this.handleFormSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Title:\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"title\",\n        value: this.state.title,\n        onChange: e => this.handleChange(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Description:\"), React.createElement(\"textarea\", {\n        name: \"description\",\n        value: this.state.description,\n        onChange: e => this.handleChange(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })));\n    };\n\n    this.state = {\n      title: \"\",\n      description: \"\"\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.toggleForm(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \" Add Beer \"), this.showNewBeerForm());\n  }\n\n}\n\nexport default NewBeer;","map":{"version":3,"sources":["/Users/carlostrujillosamper/Ironhack/webmad2019/week7/thursday/daily/lab-react-ironbeers/carlosbeers/src/components/NewBeer.js"],"names":["React","Component","axios","NewBeer","constructor","props","handleFormSubmit","event","preventDefault","title","state","description","projectID","theProject","_id","post","then","getTheProject","setState","catch","error","console","log","handleChange","target","name","value","showNewBeerForm","e","render","toggleForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass NewBeer extends Component {\n  constructor(props){\n      super(props);          //             will help us to toggle add task form   \n                            //                      |\n      this.state = { title: \"\", description: \"\",  };\n  }\n   \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const title = this.state.title;\n    const description = this.state.description;\n    const projectID = this.props.theProject._id; // <== we need to know to which project the created task belong, so we need to get its 'id'\n                                                // it has to be the 'id' because we are referencing project \n                                                // by its id in the task model on the server side ( project: {type: Schema.Types.ObjectId, ref: 'Project'})\n    \n    // { title, description, projectID } => this is 'req.body' that will be received on the server side in this route, \n    // so the names have to match\n    axios.post(\"http://localhost:5000/api/tasks\", { title, description, projectID })\n    .then( () => {\n          // after submitting the form, retrieve project one more time so the new task is displayed as well \n          //              |\n        this.props.getTheProject();\n        this.setState({title: \"\", description: \"\"});\n    })\n    .catch( error => console.log(error) )\n  }\n\n  handleChange = (event) => {  \n      const {name, value} = event.target;\n      this.setState({[name]: value});\n  }\n\n\n\n  showNewBeerForm = () => {\n   \n        return(\n            <div>\n                  <h3>Add Beer</h3>\n                  <form onSubmit={this.handleFormSubmit}>\n                  <label>Title:</label>\n                  <input type=\"text\" name=\"title\" value={this.state.title} onChange={ e => this.handleChange(e)}/>\n                  <label>Description:</label>\n                  <textarea name=\"description\" value={this.state.description} onChange={ e => this.handleChange(e)} />\n                  \n                  <input type=\"submit\" value=\"Submit\" />\n                  </form>\n            </div>\n          )\n    \n  }\n\n  render(){\n    return(\n      <div>\n            <hr />\n            <button onClick={() => this.toggleForm()}> Add Beer </button>\n            { this.showNewBeerForm() }\n      </div>\n    )\n  }\n}\n\nexport default NewBeer;"]},"metadata":{},"sourceType":"module"}